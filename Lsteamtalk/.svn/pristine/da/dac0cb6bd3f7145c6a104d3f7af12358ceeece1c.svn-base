package com.lesso.action;

import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;

import org.apache.commons.io.FileUtils;
import org.apache.struts2.ServletActionContext;

import com.lesso.beans.ErrorMsg;
import com.lesso.beans.IMUser;
import com.lesso.service.IMUserService;
import com.lesso.serviceImpl.IMUserServiceImpl;
import com.lesso.util.MD5Util;
import com.lesso.util.ResponseUtil;
import com.lesso.util.SmsCodeUtil;
import com.opensymphony.xwork2.ActionContext;



public class UsersAction extends HttpServlet{
    private IMUserService service = new IMUserServiceImpl();
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
			doPost(request, response);
	}
	
	public void doPost(HttpServletRequest request, HttpServletResponse response)
	        throws ServletException, IOException {
		String method = request.getParameter("method") == null?"":request.getParameter("method");
		if(method.equals("getlist")){
			getusersList(request,response);
		}else if(method.equals("save")){
			saveuser(request,response);
		}else if("update".equals(method)){
			updateuser(request,response);
			
		}else if("delete".equals(method)){
			delete(request,response);
		}
	}
	
	private void updateuser(HttpServletRequest request,
			HttpServletResponse response) {
		try{
			String id = request.getParameter("id") == null?"":request.getParameter("id");
			String name = request.getParameter("name") == null?"":request.getParameter("name");
			String sex = request.getParameter("sex") == null?"":request.getParameter("sex");
			String nick = request.getParameter("nick") == null?"":request.getParameter("nick");
			String phone = request.getParameter("phone") == null?"":request.getParameter("phone");
			String email = request.getParameter("email") == null?"":request.getParameter("email");
			String departId = request.getParameter("departId") == null?"":request.getParameter("departId");
			boolean isok = service.updateIMUser(name, sex, nick, phone, email, departId, "", Integer.parseInt(id));
			ErrorMsg msg = new ErrorMsg();
	           if(isok){
//					HttpSession session = request.getSession();
					msg.setHasError(false);
					msg.setLogMsg("success updateuser");
				}else{
					msg.setHasError(true);
					msg.setLogMsg("fail updateuser");
				}
				response.setContentType("text/html;charset=utf-8");
			    response.getWriter().write(JSONArray.fromObject(msg).toString());
		}catch(Exception e){
			this.ReMsg(response, true, e.getMessage(), e.getMessage());
			e.printStackTrace();
		}
		
	}

	public void delete(HttpServletRequest request, HttpServletResponse response) {
		try{
			String id = request.getParameter("id") == null?"":request.getParameter("id");
			//删除个人信息
			//boolean isok =service.deleteIMUser(Integer.parseInt(id));
			boolean isok = service.updatestate(Integer.parseInt(id));
			//删除曾经的群组信息
			
			 ErrorMsg msg = new ErrorMsg();
	           if(isok){
					msg.setHasError(false);
					msg.setLogMsg("success delete");
				}else{
					msg.setHasError(true);
					msg.setLogMsg("fail delete");
				}
				response.setContentType("text/html;charset=utf-8");
			    response.getWriter().write(JSONArray.fromObject(msg).toString());
		}catch(Exception e){
			this.ReMsg(response, true, e.getMessage(), e.getMessage());
			e.printStackTrace();
		}
		
	}

	public void getusersList(HttpServletRequest request, HttpServletResponse response){
		String page = request.getParameter("page") == null?"":request.getParameter("page");
		String rows = request.getParameter("rows") == null?"":request.getParameter("rows");
		try {
			Map<String ,Object> m = new LinkedHashMap<String ,Object>();
			m.put("status", 0);
			List<IMUser> list = service.findByPagination(Integer.parseInt(page) , Integer.parseInt(rows) , m);
			int total = service.getTotal(m);
			ResponseUtil.toPaginationJson(response, list, total);
		} catch (Exception e) {
			this.ReMsg(response, true, e.getMessage(), e.getMessage());
			e.printStackTrace();
		}
		
	}
	
	public void saveuser(HttpServletRequest request, HttpServletResponse response){
		String name = request.getParameter("name") == null?"":request.getParameter("name");
		String sex = request.getParameter("sex") == null?"":request.getParameter("sex");
		String nick = request.getParameter("nick") == null?"":request.getParameter("nick");
		String phone = request.getParameter("phone") == null?"":request.getParameter("phone");
		String email = request.getParameter("email") == null?"":request.getParameter("email");
		String departId = request.getParameter("departId") == null?"":request.getParameter("departId");
		String password = request.getParameter("password") == null?"":request.getParameter("password");
        try{
        long time =	Calendar.getInstance().getTimeInMillis(); 
        String salt = SmsCodeUtil.createRandom(true, 4);
        	IMUser user = new IMUser();
//头像地址        	user.setAvatar(avatar);
        	user.setCreated(time);
        	user.setDepartId(Integer.parseInt("1"));
        	user.setDomain("0");
        	user.setEmail(email);
        	user.setName(name);
        	user.setNick(nick);
        	user.setPassword(MD5Util.md5(MD5Util.md5(password)+salt));
        	user.setPhone(phone);
        	user.setPush_shield_status(0);
        	user.setSalt(salt);
        	user.setSex(Integer.parseInt(sex));
//        	user.setUpdated(updated);
        	user.setSign_info("");
        	user.setStatus(0 );    
           boolean isok = service.saveIMUser(user);
           ErrorMsg msg = new ErrorMsg();
           if(isok){
//				HttpSession session = request.getSession();
				msg.setHasError(false);
				msg.setLogMsg("success login");
			}else{
				msg.setHasError(true);
				msg.setLogMsg("fail login");
			}
			response.setContentType("text/html;charset=utf-8");
		    response.getWriter().write(JSONArray.fromObject(msg).toString());
        }catch(Exception e){
        	this.ReMsg(response, true, e.getMessage(), e.getMessage());
			e.printStackTrace();
        }
	}
	
	
	public void ReMsg(HttpServletResponse response,boolean HasError,String errormsg,String logmsg){
		try{
		    ErrorMsg msg = new ErrorMsg();
			msg.setHasError(HasError);
			msg.setExceptionMag(errormsg);
			msg.setLogMsg(logmsg);
			response.setContentType("text/html;charset=utf-8");
		    response.getWriter().write(JSONArray.fromObject(msg).toString());
		 }catch(Exception e){
			 e.printStackTrace();
		 }
	}
	
	
}
















