package com.lesso.action;

import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;








import com.lesso.beans.IMDepart;
import com.lesso.service.IMDepartService;
import com.lesso.serviceImpl.IMDepartServiceImpl;

public class DepartAction extends HttpServlet{
	private IMDepartService service = new IMDepartServiceImpl();
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
			doPost(request, response);
	}
	
	public void doPost(HttpServletRequest request, HttpServletResponse response)
	        throws ServletException, IOException {
		String method = request.getParameter("method") == null?"":request.getParameter("method");
		if("getdep".equals(method)){
			Map<String ,Object> m = new LinkedHashMap<String ,Object>();
			List<IMDepart> list = service.getDepList(-1, -1, m);
			String json = this.createTreeJson(list);
//			String json ="[{\"created\":1446021524,\"departName\":\"IT\",\"id\":1,\"parentid\":null,\"priority\":1,\"status\":0,\"updated\":1446021524,\"children\":[{\"created\":1446021548,\"departName\":\"硬件维护组\",\"id\":2,\"parentid\":1,\"priority\":2,\"status\":0,\"updated\":1446021548},{\"created\":1446021559,\"departName\":\"软件开发组\",\"id\":3,\"parentid\":1,\"priority\":3,\"status\":0,\"updated\":1446021559}]}]";
			System.out.println(json);
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/json");
		    response.getWriter().write(JSONArray.fromObject(json).toString());
	    }
	}
	
	
	
	
	
	/**
	   * 创建一颗树，以json字符串形式返回
	   * @param list 原始数据列表
	   * @return 树
	   */
	  private String createTreeJson(List<IMDepart> list) {
	  try{
	    JSONArray rootArray = new JSONArray();
	    for (int i=0; i<list.size(); i++) {
	    	IMDepart resource = list.get(i);
	      if ( resource.getParentid() ==0) {
	        JSONObject rootObj = createBranch(list, resource);
	        rootArray.add(rootObj);
	      }
	    }
	    
	    return rootArray.toString();
	    }catch(Exception e){
	    	e.printStackTrace();
	    	return "error";
	    }
	  }
	  
	  /**
	   * 递归创建分支节点Json对象
	   * @param list 创建树的原始数据
	   * @param currentNode 当前节点
	   * @return 当前节点与该节点的子节点json对象
	   */
	  private JSONObject createBranch(List<IMDepart> list, IMDepart currentNode) {
	     try{
		  /*
	     * 将javabean对象解析成为JSON对象
	     */
	    JSONObject currentObj = JSONObject.fromObject(currentNode);
	    JSONArray childArray = new JSONArray();
	    /*
	     * 循环遍历原始数据列表，判断列表中某对象的父id值是否等于当前节点的id值，
	     * 如果相等，进入递归创建新节点的子节点，直至无子节点时，返回节点，并将该
	     * 节点放入当前节点的子节点列表中
	     */
	    for (int i=0; i<list.size(); i++) {
	    	IMDepart newNode = list.get(i);
	      if ( newNode.getParentid().compareTo(currentNode.getId()) == 0) {
	        JSONObject childObj = createBranch(list, newNode);
	        childArray.add(childObj);
	      }
	    }
	    
	    /*
	     * 判断当前子节点数组是否为空，不为空将子节点数组加入children字段中
	     */
	    if (!childArray.isEmpty()) {
	      currentObj.put("children", childArray);
	    }
	    
	    return currentObj;
	    }catch(Exception e){
	    	e.printStackTrace();
	    	return null;
	    }
	     
	  }


//	public String getResourceTreeToJson() {
//		return this.createTreeJson(getAll());
//	}

	
	
}
