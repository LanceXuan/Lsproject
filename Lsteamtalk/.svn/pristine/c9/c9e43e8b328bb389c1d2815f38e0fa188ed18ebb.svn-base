package com.lesso.action;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts2.dispatcher.Dispatcher;

import net.sf.json.JSONArray;

import com.lesso.beans.CcNotice;
import com.lesso.beans.ErrorMsg;
import com.lesso.beans.IMAdmin;
import com.lesso.beans.IMUser;
import com.lesso.service.CcNoticeService;
import com.lesso.serviceImpl.CcNoticeServiceImpl;
import com.lesso.util.DateWorkUtil;
import com.lesso.util.ResponseUtil;

public class CcNoticeAction extends HttpServlet {
	private CcNoticeService service = new CcNoticeServiceImpl();

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request, response);
	}

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String method = request.getParameter("method") == null ? "" : request
				.getParameter("method");
		if ("saveCcNotice".equals(method)) {
			saveCcNotice(request, response);
		} else if ("getCcNotice".equals(method)) {
			getCcNotice(request, response);
		} else if ("".equals(method)) {
			getNoticeList(request, response);
		} 

	}

	private void getNoticeList(HttpServletRequest request,
			HttpServletResponse response) {
		Log logs = LogFactory.getLog(CcNoticeAction.class);
		try {
			logs.info("获取公告列表");
			String page = request.getParameter("page") == null ? "0" : request
					.getParameter("page");
			String rows = request.getParameter("rows") == null ? "0" : request
					.getParameter("rows");
			String begindate = request.getParameter("begindate") == null ? ""
					: request.getParameter("begindate");
			String enddate = request.getParameter("enddate") == null ? ""
					: request.getParameter("enddate");
			String title = request.getParameter("title") == null ? ""
					: request.getParameter("title");
             Map<String,Object> map = new HashMap<String,Object>();
             if(!"".equals(begindate)){
            	 map.put("createdA", begindate);
             }
             if(!"".equals(enddate)){
            	 map.put("createdB", begindate);
             }
             if(!"".equals(title)){
            	 map.put("title", title);
             }
             map.put("sort", "created");
             List<CcNotice> list = service.findByPagination(Integer.parseInt(page), Integer.parseInt(rows), map);
             int total = service.getTotal(map);
             ResponseUtil.toPaginationJson(response, list, total);            
		} catch (Exception e) {
             e.printStackTrace();
             logs.info("获取公告列表出错:"+e.getMessage());
		}

	}

	private void saveCcNotice(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String title = request.getParameter("title") == null ? "" : request
					.getParameter("title");
			String content = request.getParameter("content") == null ? ""
					: request.getParameter("content");
			String reviceor = request.getParameter("reviceor") == null ? ""
					: request.getParameter("reviceor");
			String firstImg = request.getParameter("firstImg") == null ? ""
					: request.getParameter("firstImg");
			CcNotice ccNotice = new CcNotice();
			HttpSession session = request.getSession();
			IMAdmin inadmin = (IMAdmin) session.getAttribute("userinfo");
			ccNotice.setTitle(title);
			ccNotice.setContent(content);
			ccNotice.setFirstImg(firstImg);
			ccNotice.setReviceor(reviceor);
			ccNotice.setSendor(String.valueOf(inadmin.getIMUserId()));
			ccNotice.setReadStatus(0);
			ccNotice.setCreated(DateWorkUtil.stringToDatenow());
			int isok = service.saveCcNotice(ccNotice);
			ErrorMsg msg = new ErrorMsg();
			if (isok>0) {
				// HttpSession session = request.getSession();
				msg.setHasError(false);
				msg.setLogMsg(String.valueOf(isok));
			} else {
				msg.setHasError(true);
				msg.setLogMsg("fail");
			}
			response.setContentType("text/html;charset=utf-8");
			response.getWriter().write(JSONArray.fromObject(msg).toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void getCcNotice(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String noticeId = request.getParameter("iceId") == null ? ""
					: request.getParameter("iceId");
			CcNotice notice = service.getCcNotice(Integer.valueOf(noticeId));
			notice.setCreated(notice.getCreated());
			request.setAttribute("notice", notice);
			request.setCharacterEncoding("UTF-8");
			response.setContentType("text/html;charset=UTF-8");
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("../jsp/checkNotice.jsp");
			dispatcher.forward(request, response);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

	}

}
